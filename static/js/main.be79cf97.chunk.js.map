{"version":3,"sources":["Components/hk.png","Components/Header.jsx","Components/Footer.jsx","Components/CreateNote.js","Components/Note.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","hk","alt","width","height","Footer","year","Date","getFullYear","CreateNote","props","useState","expand","setExpand","title","content","note","setNote","InputEvent","event","target","name","value","prevVal","console","log","type","onChange","placeholder","autoComplete","rows","column","onClick","Button","passNote","Note","deleteItem","id","App","addItem","setAddItem","onDelete","olddata","filter","currdata","indx","prevData","map","val","index","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,gC,+NCG5B,SAASC,IACvB,OACC,yBAAKC,UAAU,UACd,yBAAKC,IAAKC,IAAIC,IAAI,OAAOC,MAAM,KAAKC,OAAO,OAC3C,4CCLY,SAASC,IACvB,IAAMC,GAAO,IAAIC,MAAOC,cACxB,OACC,6BACC,mDAAsBF,EAAtB,M,mDCAY,SAASG,EAAWC,GAAQ,IAAD,EAEbC,oBAAS,GAFI,mBAElCC,EAFkC,KAE1BC,EAF0B,OAIjBF,mBAAS,CAChCG,MAAO,GACPC,QAAS,KAN+B,mBAIlCC,EAJkC,KAI5BC,EAJ4B,KASnCC,EAAa,SAACC,GAAW,IAAD,EAEPA,EAAMC,OAArBC,EAFsB,EAEtBA,KAAMC,EAFgB,EAEhBA,MAEbL,GAAQ,SAACM,GACR,OAAO,2BACHA,GADJ,kBAEEF,EAAOC,OAGVE,QAAQC,IAAIT,IAeb,OACC,yBAAKjB,UAAU,aACXa,EACD,2BACAc,KAAK,OACLL,KAAK,QACLC,MAAON,EAAKF,MACZa,SAAUT,EACVU,YAAY,QACZC,aAAa,QAAU,KAGzB,8BACAC,KAAK,GACLC,OAAO,GACPV,KAAK,UACLC,MAAON,EAAKD,QACZY,SAAUT,EACVU,YAAY,kBACZI,QAvBe,WAChBnB,GAAU,MAwBRD,EACD,kBAACqB,EAAA,EAAD,CAAQD,QAlCO,WAChBtB,EAAMwB,SAASlB,GACfC,EAAQ,CACRH,MAAO,GACPC,QAAS,OA+BP,kBAAC,IAAD,CAAShB,UAAU,eACR,M,qBC7DA,SAASoC,EAAKzB,GAK5B,OACC,yBAAKX,UAAU,QACd,gCAAMW,EAAMI,MAAZ,KACA,6BACA,+BAAKJ,EAAMK,QAAX,KACA,4BAAQhB,UAAU,MAAMiC,QARP,WAClBtB,EAAM0B,WAAW1B,EAAM2B,MAQtB,kBAAC,IAAD,CAAmBtC,UAAU,iBCPhC,IAyCeuC,EAzCH,WAAO,IAAD,EACc3B,mBAAS,IADvB,mBACT4B,EADS,KACAC,EADA,KAWVC,EAAW,SAACJ,GACZG,GAAW,SAACE,GAAD,OACTA,EAAQC,QAAO,SAACC,EAAUC,GACxB,OAAOA,IAASR,SAM1B,OACE,6BACE,kBAACvC,EAAD,MACA,kBAACW,EAAD,CAAYyB,SAnBA,SAAClB,GACbwB,GAAW,SAACM,GACV,MAAM,GAAN,mBAAWA,GAAX,CAAqB9B,OAEvBQ,QAAQC,IAAIT,MAkBVuB,EAAQQ,KAAI,SAACC,EAAIC,GACb,OAAO,kBAACd,EAAD,CACCe,IAAKD,EACLZ,GAAIY,EACJnC,MAAOkC,EAAIlC,MACXC,QAASiC,EAAIjC,QACbqB,WAAYK,OAI1B,kBAACpC,EAAD,QC/Bc8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAOC,SAASC,eAAe,W","file":"static/js/main.be79cf97.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hk.313f2004.png\";","import React from 'react'\r\nimport hk from '../Components/hk.png'\r\n\r\nexport default function Header() {\r\n\treturn (\r\n\t\t<div className=\"header\">\r\n\t\t\t<img src={hk} alt=\"logo\" width=\"70\" height=\"50\"/>\r\n\t\t\t<h1> Hash keep </h1>\r\n\t\t</div>\r\n\t)\r\n}","import React from 'react'\r\n\r\nexport default function Footer() {\r\n\tconst year = new Date().getFullYear();\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<footer> copyright Â© {year} </footer> \r\n\t\t</div>\r\n\t)\r\n}","import React, {useState} from 'react'\r\nimport Button from '@material-ui/core/Button';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Style from '../Components/Style.css'\r\n\r\n\r\nexport default function CreateNote(props) {\r\n\r\n\tconst [expand, setExpand] = useState(false);\r\n\r\n\tconst [note, setNote] = useState({\r\n\t\ttitle: \"\",\r\n\t\tcontent: \"\",\r\n\t});\r\n\r\n\tconst InputEvent = (event) => {\r\n\r\n\t\tconst {name, value} = event.target;\r\n\r\n\t\tsetNote((prevVal) =>{\r\n\t\t\treturn {\r\n\t\t\t\t...prevVal,\r\n\t\t\t\t[name]: value,\r\n\t\t\t}\r\n\t\t})\r\n\t\tconsole.log(note);\r\n\t}\r\n\r\n\tconst addEvent = () => {\r\n\t\tprops.passNote(note);\r\n\t\tsetNote({\r\n\t\ttitle: \"\",\r\n\t\tcontent: \"\",\r\n\t});\r\n\t}\r\n\r\n\tconst expandIt = () =>{\r\n\t\tsetExpand(true);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"main_note\">\r\n\t\t\t\t\t{expand?\r\n\t\t\t\t\t<input \r\n\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\tname=\"title\"\r\n\t\t\t\t\tvalue={note.title}\r\n\t\t\t\t\tonChange={InputEvent} \r\n\t\t\t\t\tplaceholder=\"Title\" \r\n\t\t\t\t\tautoComplete=\"off\"/> : null}\r\n\r\n\r\n\t\t\t<textarea \r\n\t\t\trows=\"\" \r\n\t\t\tcolumn=\"\" \r\n\t\t\tname=\"content\"\r\n\t\t\tvalue={note.content} \r\n\t\t\tonChange={InputEvent} \r\n\t\t\tplaceholder=\"Write a note...\" \r\n\t\t\tonClick={expandIt}/>\r\n\r\n\t\t\t{expand?\r\n\t\t\t<Button onClick={addEvent}>\r\n\t\t\t\t<AddIcon className=\"plus_sign\"/>\r\n\t\t\t</Button> : null }\r\n\t\t</div>\r\n\t)\r\n}","import React from 'react'\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\n\r\nexport default function Note(props) {\r\n\r\n\tconst deleteNote = () => {\r\n\t\tprops.deleteItem(props.id);\r\n\t}\r\n\treturn (\r\n\t\t<div className=\"note\">\r\n\t\t\t<h1> {props.title} </h1>\r\n\t\t\t<br/>\r\n\t\t\t<p> {props.content} </p>\r\n\t\t\t<button className=\"btn\" onClick={deleteNote}>\r\n\t\t\t<DeleteOutlineIcon className=\"deleteIcon\"/>\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t)\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport Header from './Components/Header';\nimport Footer from './Components/Footer';\nimport CreateNote from './Components/CreateNote';\nimport Note from './Components/Note';\n\nconst App = () => {\n  const [addItem, setAddItem] = useState([]);\n\n\n  const addNote = (note) =>{\n      setAddItem((prevData) =>{\n        return [...prevData, note];\n      })\n      console.log(note);\n  };\n\n  const onDelete = (id) => {\n        setAddItem((olddata)=> \n          olddata.filter((currdata, indx) => {\n            return indx !== id;\n          })\n        );\n  };\n\n\n  return (\n    <div>\n      <Header/>\n      <CreateNote passNote={addNote} />\n\n      {\n        addItem.map((val,index) =>{\n            return <Note \n                    key={index}\n                    id={index}\n                    title={val.title}\n                    content={val.content}\n                    deleteItem={onDelete}\n        />\n      })\n      }\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>,document.getElementById('root'));\n"],"sourceRoot":""}